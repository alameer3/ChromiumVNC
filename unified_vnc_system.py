#!/usr/bin/env python3
"""
ูุธุงู VNC ููุญุฏ ูุน ุฏุนู ูุงูู ูู noVNC ูุฌููุน ุงููุธุงุฆู
Unified VNC system with full noVNC support and all features
"""
import subprocess
import time
import os
import signal
import threading
import logging
from http.server import HTTPServer, SimpleHTTPRequestHandler
import html
import json

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class UnifiedVNCSystem:
    def __init__(self):
        self.processes = []
        self.running = True
        
    def cleanup(self):
        """ุชูุธูู ุดุงูู ูููุธุงู"""
        logging.info("๐งน ุชูุธูู ุงููุธุงู ุงูููุญุฏ...")
        
        # ุฅููุงู ุงูุนูููุงุช ุงูููุชุชุจุนุฉ
        for proc in self.processes:
            try:
                proc.terminate()
                proc.wait(timeout=2)
            except:
                try:
                    proc.kill()
                except:
                    pass
        
        # ุชูุธูู ุดุงูู ูุฌููุน ุงูุนูููุงุช ุฐุงุช ุงูุตูุฉ
        cleanup_commands = [
            ['pkill', '-f', 'websockify'],
            ['pkill', '-f', 'chromium'],
            ['pkill', '-f', 'x11vnc'],
            ['pkill', '-f', 'Xvfb']
        ]
        
        for cmd in cleanup_commands:
            subprocess.run(cmd, stderr=subprocess.DEVNULL)
        
        time.sleep(1)
        logging.info("โ ุชู ุชูุธูู ุงููุธุงู")
    
    def start_virtual_display(self):
        """ุจุฏุก ุงูุดุงุดุฉ ุงูุงูุชุฑุงุถูุฉ"""
        logging.info("๐ฅ๏ธ ุจุฏุก ุงูุดุงุดุฉ ุงูุงูุชุฑุงุถูุฉ...")
        
        cmd = [
            "/nix/store/sx3d9r61bi7xpg1vjiyvbay99634i282-xorg-server-21.1.18/bin/Xvfb", 
            ":1",
            "-screen", "0", "1920x1080x24",
            "-ac", "-nolisten", "tcp"
        ]
        
        proc = subprocess.Popen(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        self.processes.append(proc)
        
        os.environ["DISPLAY"] = ":1"
        time.sleep(2)
        return True
    
    def start_vnc_server(self):
        """ุจุฏุก ุฎุงุฏู VNC"""
        logging.info("๐ ุจุฏุก ุฎุงุฏู VNC...")
        
        cmd = [
            "x11vnc",
            "-display", ":1",
            "-forever",
            "-nopw",
            "-listen", "127.0.0.1",
            "-rfbport", "5900",
            "-shared",
            "-nosel",
            "-nocursor",
            "-bg"
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        time.sleep(1)
        return result.returncode == 0
    
    def start_chromium_browser(self):
        """ุชุดุบูู ูุชุตูุญ Chromium"""
        logging.info("๐ ุชุดุบูู ูุชุตูุญ Chromium...")
        
        cmd = [
            "/nix/store/qa9cnw4v5xkxyip6mb9kxqfq1z4x2dx1-chromium-138.0.7204.100/bin/chromium",
            "--no-sandbox",
            "--disable-dev-shm-usage",
            "--disable-gpu",
            "--window-size=1920,1080",
            "--start-maximized",
            "--user-data-dir=/tmp/chromium-vnc-unified",
            "https://www.google.com/webhp?hl=ar"
        ]
        
        proc = subprocess.Popen(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        self.processes.append(proc)
        time.sleep(3)
        return True
    
    def start_websockify_proxy(self):
        """ุชุดุบูู websockify proxy ุนูู ูููุฐ 80"""
        logging.info("๐ ุชุดุบูู websockify ุนูู ุงููููุฐ 80...")
        
        def run_websockify():
            cmd = [
                "/home/runner/workspace/.pythonlibs/bin/websockify",
                "80",  # ุงุณุชุฎุฏุงู ูููุฐ 80 ูููุตูู ุงููุจุงุดุฑ
                "127.0.0.1:5900",  # VNC server
                "--web", ".",  # ุชูุฏูู ุงููููุงุช
                "--log-file", "/tmp/websockify.log"
            ]
            
            proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            self.processes.append(proc)
            
            # ุงูุชุธุงุฑ ูุชุญูู
            time.sleep(3)
            
            if proc.poll() is None:
                logging.info("โ websockify ูุนูู ุนูู ุงููููุฐ 80")
            else:
                stdout, stderr = proc.communicate()
                logging.error(f"โ websockify ูุดู: {stderr}")
        
        websock_thread = threading.Thread(target=run_websockify)
        websock_thread.daemon = True
        websock_thread.start()
        
        time.sleep(4)
        return True
    
    def check_services(self):
        """ูุญุต ุฌููุน ุงูุฎุฏูุงุช"""
        logging.info("๐ ูุญุต ุญุงูุฉ ุงูุฎุฏูุงุช...")
        
        # ูุญุต VNC
        try:
            result = subprocess.run(['pgrep', 'x11vnc'], capture_output=True)
            vnc_status = "โ ูุนูู" if result.returncode == 0 else "โ ูุง ูุนูู"
        except:
            vnc_status = "โ ูุง ูุนูู"
        
        # ูุญุต Chromium
        try:
            result = subprocess.run(['pgrep', 'chromium'], capture_output=True)
            chrome_status = "โ ูุนูู" if result.returncode == 0 else "โ ูุง ูุนูู"
        except:
            chrome_status = "โ ูุง ูุนูู"
        
        # ูุญุต websockify
        try:
            result = subprocess.run(['pgrep', 'websockify'], capture_output=True)
            websock_status = "โ ูุนูู" if result.returncode == 0 else "โ ูุง ูุนูู"
        except:
            websock_status = "โ ูุง ูุนูู"
        
        logging.info(f"   VNC Server: {vnc_status}")
        logging.info(f"   Chromium: {chrome_status}")
        logging.info(f"   websockify: {websock_status}")
        
        return vnc_status, chrome_status, websock_status
    
    def run(self):
        """ุชุดุบูู ุงููุธุงู ุงูููุญุฏ ุงููุงูู"""
        logging.info("=" * 60)
        logging.info("๐ ุจุฏุก ุงููุธุงู ุงูููุญุฏ ูู VNC ูุน noVNC v1.6.0")
        logging.info("=" * 60)
        
        try:
            # ุชูุธูู ุฃููู
            self.cleanup()
            
            # ุฎุทูุงุช ุงูุชุดุบูู
            steps = [
                ("ุงูุดุงุดุฉ ุงูุงูุชุฑุงุถูุฉ Xvfb", self.start_virtual_display),
                ("ุฎุงุฏู VNC", self.start_vnc_server),
                ("ูุชุตูุญ Chromium", self.start_chromium_browser),
                ("websockify Proxy", self.start_websockify_proxy)
            ]
            
            success_count = 0
            for step_name, step_func in steps:
                logging.info(f"โ๏ธ ุชุดุบูู {step_name}...")
                try:
                    if step_func():
                        logging.info(f"โ {step_name} ูุฌุญ")
                        success_count += 1
                    else:
                        logging.error(f"โ {step_name} ูุดู")
                except Exception as e:
                    logging.error(f"โ ุฎุทุฃ ูู {step_name}: {e}")
            
            # ูุญุต ุงูุฎุฏูุงุช ุงูููุงุฆู
            time.sleep(2)
            vnc_status, chrome_status, websock_status = self.check_services()
            
            # ุชูุฑูุฑ ุงูููุงุฆู
            logging.info("=" * 60)
            if success_count >= 3:
                logging.info("โ ุงููุธุงู ุงูููุญุฏ ูุนูู ุจูุฌุงุญ!")
                logging.info("๐ ุงููุงุฌูุงุช ุงููุชุงุญุฉ:")
                logging.info("   ๐ฑ ุงููุงุฌูุฉ ุงูุนุฑุจูุฉ ุงููุญุณูุฉ:")
                logging.info("      http://localhost/vnc_enhanced_arabic.html")
                logging.info("   ๐ฅ๏ธ ูุงุฌูุฉ noVNC ุงููุงููุฉ:")
                logging.info("      http://localhost/noVNC/vnc.html")
                logging.info("   โก ูุงุฌูุฉ noVNC ุงููุจุณุทุฉ:")
                logging.info("      http://localhost/noVNC/vnc_lite.html")
                logging.info("=" * 60)
                logging.info("๐ง ูุนูููุงุช ุชูููุฉ:")
                logging.info("   โข VNC Server: 127.0.0.1:5900")
                logging.info("   โข WebSocket: localhost:80")
                logging.info("   โข Display: :1 (1920x1080)")
                logging.info("   โข ุฌููุน ูุฒุงูุง noVNC v1.6.0 ูููุนูุฉ")
                logging.info("=" * 60)
            else:
                logging.error("โ ูุดู ูู ุชุดุบูู ุจุนุถ ุงูุฎุฏูุงุช")
                return False
            
            # ุงูุจูุงุก ูู ุงูุชุดุบูู
            while self.running:
                time.sleep(10)
                # ูุญุต ุฏูุฑู ููุฎุฏูุงุช
                vnc_status, chrome_status, websock_status = self.check_services()
                
        except KeyboardInterrupt:
            logging.info("๐ ุฅููุงู ุงููุธุงู ุงูููุญุฏ...")
        except Exception as e:
            logging.error(f"โ ุฎุทุฃ ุนุงู: {e}")
        finally:
            self.cleanup()

def signal_handler(sig, frame):
    """ูุนุงูุฌ ุฅุดุงุฑุฉ ุงูุฅููุงู"""
    global vnc_system
    if vnc_system:
        vnc_system.running = False
    exit(0)

def main():
    global vnc_system
    
    # ุชุนููู ูุนุงูุฌุงุช ุงูุฅุดุงุฑุงุช
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # ุชุดุบูู ุงููุธุงู
    vnc_system = UnifiedVNCSystem()
    vnc_system.run()

if __name__ == "__main__":
    main()